{"ast":null,"code":"import _objectSpread from \"/Users/thanhthanhbui/Desktop/dpl/week7/day1/blog-refactor/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/thanhthanhbui/Desktop/dpl/week7/day1/blog-refactor/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport axios from 'axios';\nvar BLOGS = 'BLOGS';\nvar ADD_BLOG = 'ADD_BLOG';\nvar UPDATE_BLOG = 'UPDATE_BLOG';\nvar DELETE_BLOG = 'DELETE_BLOG';\nexport var getBlogs = function getBlogs(setLoaded) {\n  return function (dispatch) {\n    axios.get('/api/blogs').then(function (res) {\n      return dispatch({\n        type: BLOGS,\n        blogs: res.data\n      });\n    }).then(setLoaded);\n  };\n};\nexport var addBlog = function addBlog(blog) {\n  return function (dispatch) {\n    axios;\n  };\n};\n\nvar blogs = function blogs() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'BLOGS':\n      return action.blogs;\n\n    case 'ADD_BLOG':\n      return [action.blog].concat(_toConsumableArray(state));\n\n    case 'DELETE_BLOG':\n      return state.filter(function (blog) {\n        return blog.id !== action.id;\n      });\n\n    case 'EDIT_BLOG':\n      return state.map(function (blog) {\n        return blog.id === action.id ? _objectSpread({}, blog, {\n          editing: !blog.editing\n        }) : blog;\n      });\n\n    case 'UPDATE_BLOG':\n      return state.map(function (blog) {\n        if (blog.id === action.id) {\n          return _objectSpread({}, blog, {\n            title: action.blog.newTitle,\n            body: action.blog.newBody,\n            editing: !blog.editing\n          });\n        } else return blog;\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default blogs;","map":{"version":3,"sources":["/Users/thanhthanhbui/Desktop/dpl/week7/day1/blog-refactor/client/src/reducers/blogs.js"],"names":["axios","BLOGS","ADD_BLOG","UPDATE_BLOG","DELETE_BLOG","getBlogs","setLoaded","dispatch","get","then","res","type","blogs","data","addBlog","blog","state","action","filter","id","map","editing","title","newTitle","body","newBody"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,KAAK,GAAG,OAAd;AACA,IAAMC,QAAQ,GAAG,UAAjB;AACA,IAAMC,WAAW,GAAG,aAApB;AACA,IAAMC,WAAW,GAAG,aAApB;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAe;AACrC,SAAO,UAACC,QAAD,EAAc;AACnBP,IAAAA,KAAK,CAACQ,GAAN,CAAU,YAAV,EACCC,IADD,CACO,UAAAC,GAAG;AAAA,aAAIH,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEV,KAAR;AAAeW,QAAAA,KAAK,EAAEF,GAAG,CAACG;AAA1B,OAAD,CAAZ;AAAA,KADV,EAECJ,IAFD,CAEOH,SAFP;AAGD,GAJD;AAKD,CANM;AAQP,OAAO,IAAMQ,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAU;AAC/B,SAAO,UAACR,QAAD,EAAc;AACnBP,IAAAA,KAAK;AACN,GAFD;AAGD,CAJM;;AAMP,IAAMY,KAAK,GAAG,SAARA,KAAQ,GAA0B;AAAA,MAAxBI,KAAwB,uEAAhB,EAAgB;AAAA,MAAZC,MAAY;;AACtC,UAAOA,MAAM,CAACN,IAAd;AACE,SAAK,OAAL;AACE,aAAOM,MAAM,CAACL,KAAd;;AACF,SAAK,UAAL;AACE,cAAQK,MAAM,CAACF,IAAf,4BAAwBC,KAAxB;;AACF,SAAK,aAAL;AACE,aAAOA,KAAK,CAACE,MAAN,CAAa,UAACH,IAAD;AAAA,eAAUA,IAAI,CAACI,EAAL,KAAYF,MAAM,CAACE,EAA7B;AAAA,OAAb,CAAP;;AACF,SAAK,WAAL;AACE,aAAOH,KAAK,CAACI,GAAN,CAAU,UAACL,IAAD;AAAA,eAAUA,IAAI,CAACI,EAAL,KAAYF,MAAM,CAACE,EAAnB,qBAA4BJ,IAA5B;AAAkCM,UAAAA,OAAO,EAAE,CAACN,IAAI,CAACM;AAAjD,aAA4DN,IAAtE;AAAA,OAAV,CAAP;;AACF,SAAK,aAAL;AACE,aAAOC,KAAK,CAACI,GAAN,CAAU,UAACL,IAAD,EAAU;AACzB,YAAIA,IAAI,CAACI,EAAL,KAAYF,MAAM,CAACE,EAAvB,EAA2B;AACzB,mCACKJ,IADL;AAEEO,YAAAA,KAAK,EAAEL,MAAM,CAACF,IAAP,CAAYQ,QAFrB;AAGEC,YAAAA,IAAI,EAAEP,MAAM,CAACF,IAAP,CAAYU,OAHpB;AAIEJ,YAAAA,OAAO,EAAE,CAACN,IAAI,CAACM;AAJjB;AAMD,SAPD,MAQI,OAAON,IAAP;AACL,OAVM,CAAP;;AAWF;AACE,aAAOC,KAAP;AAtBJ;AAwBD,CAzBD;;AA2BA,eAAeJ,KAAf","sourcesContent":["import axios from 'axios'\n\nconst BLOGS = 'BLOGS'\nconst ADD_BLOG = 'ADD_BLOG'\nconst UPDATE_BLOG = 'UPDATE_BLOG'\nconst DELETE_BLOG = 'DELETE_BLOG'\n\nexport const getBlogs = (setLoaded) => {\n  return (dispatch) => {\n    axios.get('/api/blogs')\n    .then( res => dispatch({ type: BLOGS, blogs: res.data }))\n    .then( setLoaded )\n  }\n}\n\nexport const addBlog = (blog) => {\n  return (dispatch) => {\n    axios\n  }\n}\n\nconst blogs = ( state = [], action ) => {\n  switch(action.type) {\n    case 'BLOGS':\n      return action.blogs\n    case 'ADD_BLOG':\n      return [action.blog, ...state]\n    case 'DELETE_BLOG':\n      return state.filter((blog) => blog.id !== action.id)\n    case 'EDIT_BLOG':\n      return state.map((blog) => blog.id === action.id ? {...blog, editing: !blog.editing} : blog)\n    case 'UPDATE_BLOG':\n      return state.map((blog) => {\n        if (blog.id === action.id) {\n          return {\n            ...blog,\n            title: action.blog.newTitle,\n            body: action.blog.newBody,\n            editing: !blog.editing\n          }\n        } else\n            return blog\n      })\n    default:\n      return state\n  }\n}\n\nexport default blogs"]},"metadata":{},"sourceType":"module"}